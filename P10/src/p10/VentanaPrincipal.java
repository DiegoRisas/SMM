
package p10;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import sm.dsv.Imagen.PanelLienzo;
import static sm.dsv.Imagen.PanelLienzo.Herramienta.Elipse;
import static sm.dsv.Imagen.PanelLienzo.Herramienta.Fantasma;
import static sm.dsv.Imagen.PanelLienzo.Herramienta.Linea;
import static sm.dsv.Imagen.PanelLienzo.Herramienta.Rectangulo;
import static sm.dsv.Imagen.PanelLienzo.Herramienta.Arrastrar;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;


/**
 *
 * @author Diego
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    private BufferedImage imgFuente;
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    private PanelLienzo getSelectedLienzo() {
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        return vi!=null ? vi.getLienzo2D() : null;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paint = new javax.swing.ButtonGroup();
        colo = new javax.swing.ButtonGroup();
        jColorChooser1 = new javax.swing.JColorChooser();
        PanelToolBar = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        Nuevo = new javax.swing.JButton();
        Abrir = new javax.swing.JButton();
        Guardar = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        BotonLinea = new javax.swing.JToggleButton();
        BotonRectangulo = new javax.swing.JToggleButton();
        BotonElipse = new javax.swing.JToggleButton();
        BotonFantasma = new javax.swing.JToggleButton();
        BotonMover = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        BotonColor = new javax.swing.JButton();
        BotonRelleno = new javax.swing.JToggleButton();
        BotonTransparencia = new javax.swing.JToggleButton();
        BotonAlisar = new javax.swing.JToggleButton();
        Grosor = new javax.swing.JSlider();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        Volcado = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        PanelAbajo = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        Brillo = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        Contraste = new javax.swing.JSlider();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        Mascara = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        Cometa = new javax.swing.JSlider();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        ContrasteButton = new javax.swing.JButton();
        OscurecerButton = new javax.swing.JButton();
        IluminarButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        rotateSlider = new javax.swing.JSlider();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        Rotar180Button = new javax.swing.JButton();
        MasButton = new javax.swing.JButton();
        menosButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        PanelEstado = new javax.swing.JPanel();
        LabelEstado = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        MenuNuevo = new javax.swing.JMenuItem();
        MenuAbrir = new javax.swing.JMenuItem();
        MenuGuardar = new javax.swing.JMenuItem();
        menuImagen = new javax.swing.JMenu();
        RescaleOpMENU = new javax.swing.JMenuItem();
        ConvolveOpMENU = new javax.swing.JMenuItem();
        AffineTransformOpMENU = new javax.swing.JMenuItem();
        LookupOpMENU = new javax.swing.JMenuItem();
        reto1 = new javax.swing.JMenuItem();
        reto2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PanelToolBar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jToolBar2.setRollover(true);
        jToolBar2.setBorderPainted(false);

        Nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/nuevo.png"))); // NOI18N
        Nuevo.setFocusable(false);
        Nuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Nuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoActionPerformed(evt);
            }
        });
        jToolBar2.add(Nuevo);

        Abrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/abrir.png"))); // NOI18N
        Abrir.setFocusable(false);
        Abrir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Abrir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirActionPerformed(evt);
            }
        });
        jToolBar2.add(Abrir);

        Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/guardar.png"))); // NOI18N
        Guardar.setFocusable(false);
        Guardar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Guardar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        jToolBar2.add(Guardar);
        jToolBar2.add(jSeparator3);

        paint.add(BotonLinea);
        BotonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        BotonLinea.setBorderPainted(false);
        BotonLinea.setFocusable(false);
        BotonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonLineaActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonLinea);

        paint.add(BotonRectangulo);
        BotonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        BotonRectangulo.setBorderPainted(false);
        BotonRectangulo.setFocusable(false);
        BotonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRectanguloActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonRectangulo);

        paint.add(BotonElipse);
        BotonElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        BotonElipse.setToolTipText("");
        BotonElipse.setBorderPainted(false);
        BotonElipse.setFocusable(false);
        BotonElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonElipse.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonElipseActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonElipse);

        paint.add(BotonFantasma);
        BotonFantasma.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/fantasma.png"))); // NOI18N
        BotonFantasma.setFocusable(false);
        BotonFantasma.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonFantasma.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonFantasma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonFantasmaActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonFantasma);

        paint.add(BotonMover);
        BotonMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        BotonMover.setFocusable(false);
        BotonMover.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonMover.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonMover.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BotonMoverStateChanged(evt);
            }
        });
        BotonMover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonMoverActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonMover);
        jToolBar2.add(jSeparator1);

        BotonColor.setBackground(new java.awt.Color(0, 0, 0));
        BotonColor.setActionCommand("color");
        BotonColor.setFocusable(false);
        BotonColor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonColor.setOpaque(true);
        BotonColor.setPreferredSize(new java.awt.Dimension(34, 32));
        BotonColor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonColorActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonColor);

        BotonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        BotonRelleno.setFocusable(false);
        BotonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRellenoActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonRelleno);

        BotonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        BotonTransparencia.setFocusable(false);
        BotonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonTransparencia.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BotonTransparenciaStateChanged(evt);
            }
        });
        BotonTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonTransparenciaActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonTransparencia);

        BotonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        BotonAlisar.setFocusable(false);
        BotonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonAlisar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BotonAlisarStateChanged(evt);
            }
        });
        BotonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAlisarActionPerformed(evt);
            }
        });
        jToolBar2.add(BotonAlisar);

        Grosor.setToolTipText("grosor");
        Grosor.setValue(0);
        Grosor.setPreferredSize(new java.awt.Dimension(75, 20));
        Grosor.setRequestFocusEnabled(false);
        Grosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                GrosorStateChanged(evt);
            }
        });
        jToolBar2.add(Grosor);
        jToolBar2.add(jSeparator2);

        Volcado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/volcado.png"))); // NOI18N
        Volcado.setFocusable(false);
        Volcado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Volcado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Volcado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VolcadoActionPerformed(evt);
            }
        });
        jToolBar2.add(Volcado);

        PanelToolBar.add(jToolBar2);

        getContentPane().add(PanelToolBar, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 943, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 516, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        PanelAbajo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PanelAbajo.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/brillo.png"))); // NOI18N
        jToolBar1.add(jLabel1);

        Brillo.setMaximum(255);
        Brillo.setMinimum(-255);
        Brillo.setToolTipText("brillo");
        Brillo.setValue(0);
        Brillo.setFocusTraversalPolicyProvider(true);
        Brillo.setPreferredSize(new java.awt.Dimension(75, 20));
        Brillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                BrilloStateChanged(evt);
            }
        });
        Brillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                BrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                BrilloFocusLost(evt);
            }
        });
        jToolBar1.add(Brillo);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/contraste.png"))); // NOI18N
        jToolBar1.add(jLabel2);

        Contraste.setToolTipText("contraste");
        Contraste.setValue(10);
        Contraste.setPreferredSize(new java.awt.Dimension(75, 20));
        Contraste.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ContrasteStateChanged(evt);
            }
        });
        Contraste.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ContrasteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ContrasteFocusLost(evt);
            }
        });
        jToolBar1.add(Contraste);
        jToolBar1.add(jSeparator4);

        Mascara.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplacaino", "Emborronamiento Iluminado" }));
        Mascara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MascaraActionPerformed(evt);
            }
        });
        jToolBar1.add(Mascara);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/cometa.png"))); // NOI18N
        jToolBar1.add(jLabel3);

        Cometa.setMaximum(20);
        Cometa.setMinimum(1);
        Cometa.setToolTipText("cometa");
        Cometa.setValue(1);
        Cometa.setPreferredSize(new java.awt.Dimension(75, 20));
        Cometa.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CometaStateChanged(evt);
            }
        });
        Cometa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CometaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CometaFocusLost(evt);
            }
        });
        jToolBar1.add(Cometa);
        jToolBar1.add(jSeparator5);

        ContrasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/contraste2.png"))); // NOI18N
        ContrasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContrasteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(ContrasteButton);

        OscurecerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/ocurecer.png"))); // NOI18N
        OscurecerButton.setFocusable(false);
        OscurecerButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        OscurecerButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        OscurecerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OscurecerButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(OscurecerButton);

        IluminarButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/iluminar.png"))); // NOI18N
        IluminarButton.setFocusable(false);
        IluminarButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        IluminarButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        IluminarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IluminarButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(IluminarButton);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/operador1.png"))); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton4);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/operador2.png"))); // NOI18N
        jToolBar1.add(jLabel4);

        rotateSlider.setMaximum(360);
        rotateSlider.setValue(0);
        rotateSlider.setPreferredSize(new java.awt.Dimension(50, 20));
        rotateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotateSliderStateChanged(evt);
            }
        });
        rotateSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rotateSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotateSliderFocusLost(evt);
            }
        });
        jToolBar1.add(rotateSlider);
        jToolBar1.add(jSeparator6);

        Rotar180Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/rotar180.png"))); // NOI18N
        Rotar180Button.setFocusable(false);
        Rotar180Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Rotar180Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Rotar180Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Rotar180ButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(Rotar180Button);

        MasButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/mas.png"))); // NOI18N
        MasButton.setFocusable(false);
        MasButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        MasButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        MasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MasButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(MasButton);

        menosButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos2/menos.png"))); // NOI18N
        menosButton.setFocusable(false);
        menosButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        menosButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        menosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menosButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(menosButton);

        PanelAbajo.add(jToolBar1, java.awt.BorderLayout.LINE_START);

        jPanel1.setMaximumSize(new java.awt.Dimension(0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(247, 10));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        PanelAbajo.add(jPanel1, java.awt.BorderLayout.CENTER);

        PanelEstado.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        PanelEstado.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        LabelEstado.setText("Barra de estado");
        PanelEstado.add(LabelEstado);

        PanelAbajo.add(PanelEstado, java.awt.BorderLayout.SOUTH);

        getContentPane().add(PanelAbajo, java.awt.BorderLayout.SOUTH);

        menuArchivo.setText("Archivo");

        MenuNuevo.setText("Nuevo");
        MenuNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNuevoActionPerformed(evt);
            }
        });
        menuArchivo.add(MenuNuevo);

        MenuAbrir.setText("Abrir");
        MenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAbrirActionPerformed(evt);
            }
        });
        menuArchivo.add(MenuAbrir);

        MenuGuardar.setText("Guardar");
        MenuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGuardarActionPerformed(evt);
            }
        });
        menuArchivo.add(MenuGuardar);

        jMenuBar2.add(menuArchivo);

        menuImagen.setText("Imagen");

        RescaleOpMENU.setText("RescaleOp");
        RescaleOpMENU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RescaleOpMENUActionPerformed(evt);
            }
        });
        menuImagen.add(RescaleOpMENU);

        ConvolveOpMENU.setText("ConvolveOp");
        ConvolveOpMENU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvolveOpMENUActionPerformed(evt);
            }
        });
        menuImagen.add(ConvolveOpMENU);

        AffineTransformOpMENU.setText("AffineTransformOp");
        AffineTransformOpMENU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AffineTransformOpMENUActionPerformed(evt);
            }
        });
        menuImagen.add(AffineTransformOpMENU);

        LookupOpMENU.setText("LookupOp");
        LookupOpMENU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LookupOpMENUActionPerformed(evt);
            }
        });
        menuImagen.add(LookupOpMENU);

        reto1.setText("Transformacion Lineal");
        reto1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reto1ActionPerformed(evt);
            }
        });
        menuImagen.add(reto1);

        reto2.setText("Oscurecer zonas claras");
        reto2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reto2ActionPerformed(evt);
            }
        });
        menuImagen.add(reto2);

        jMenuBar2.add(menuImagen);

        setJMenuBar(jMenuBar2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNuevoActionPerformed
        VentanaInterna vi = new VentanaInterna();
        escritorio.add(vi);
        vi.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(500,500,BufferedImage.TYPE_INT_RGB);
        Graphics2D g2d = img.createGraphics();
        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, img.getWidth(), img.getHeight());
        g2d.dispose();
        vi.getLienzo2D().setImg(img);
    }//GEN-LAST:event_MenuNuevoActionPerformed

    private void MenuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGuardarActionPerformed
        VentanaInterna vi=(VentanaInterna) escritorio.getSelectedFrame();
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getPaintedImage();
            if (img != null) {
                JFileChooser dlg = new JFileChooser();
                int resp = dlg.showSaveDialog(this);
                if (resp == JFileChooser.APPROVE_OPTION) {
                    try {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    } catch (Exception ex) {
                        System.err.println("Error al guardar la imagen");
                    }
                }
            }
        }
    }//GEN-LAST:event_MenuGuardarActionPerformed

    private void BotonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonLineaActionPerformed
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setHerramienta(Linea);
        LabelEstado.setText("Dibujando Linea");
    }//GEN-LAST:event_BotonLineaActionPerformed

    private void BotonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRectanguloActionPerformed
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setHerramienta(Rectangulo);
        LabelEstado.setText("Dibujando Rectangulo");
    }//GEN-LAST:event_BotonRectanguloActionPerformed

    private void BotonElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonElipseActionPerformed
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setHerramienta(Elipse);
        LabelEstado.setText("Dibujando Elipse");
    }//GEN-LAST:event_BotonElipseActionPerformed

    private void BotonFantasmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonFantasmaActionPerformed
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setHerramienta(Fantasma);
        LabelEstado.setText("Dibujando Fantasma");
    }//GEN-LAST:event_BotonFantasmaActionPerformed

    private void BotonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRellenoActionPerformed
        if(this.getSelectedLienzo() != null){
            this.getSelectedLienzo().setRelleno(this.BotonRelleno.isSelected());
            this.getSelectedLienzo().actualizarSelectedFigure();
        } 
    }//GEN-LAST:event_BotonRellenoActionPerformed

    private void BotonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonColorActionPerformed
        Color nuevoColor = JColorChooser.showDialog(null, "Elige un color", null);
        if (nuevoColor != null) {
            BotonColor.setBackground(nuevoColor);
            if(this.getSelectedLienzo() != null){
                this.getSelectedLienzo().setColor(nuevoColor);
                this.getSelectedLienzo().actualizarSelectedFigure();
            }
        }
    }//GEN-LAST:event_BotonColorActionPerformed

    private void BotonMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonMoverActionPerformed
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setHerramienta(Arrastrar);
        LabelEstado.setText("Arrastar selecionado");
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setMover(this.BotonMover.isSelected());
    }//GEN-LAST:event_BotonMoverActionPerformed

    private void GrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_GrosorStateChanged
        Stroke trazo = new BasicStroke(this.Grosor.getValue());
        if(this.getSelectedLienzo() != null){
            this.getSelectedLienzo().setTrazo(trazo);
            this.getSelectedLienzo().actualizarSelectedFigure();
        }        
    }//GEN-LAST:event_GrosorStateChanged

    private void BotonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAlisarActionPerformed
        if(this.getSelectedLienzo() != null){
            this.getSelectedLienzo().setAlisado(this.BotonAlisar.isSelected());
            this.getSelectedLienzo().actualizarSelectedFigure();
        }        
    }//GEN-LAST:event_BotonAlisarActionPerformed

    private void BotonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonTransparenciaActionPerformed
        if(this.getSelectedLienzo() != null){
            this.getSelectedLienzo().setTransparencia(this.BotonTransparencia.isSelected());
            this.getSelectedLienzo().actualizarSelectedFigure();
        }        
    }//GEN-LAST:event_BotonTransparenciaActionPerformed

    private void BotonMoverStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BotonMoverStateChanged
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setMover(this.BotonMover.isSelected());
    }//GEN-LAST:event_BotonMoverStateChanged

    private void BotonTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BotonTransparenciaStateChanged
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setTransparencia(this.BotonTransparencia.isSelected());
    }//GEN-LAST:event_BotonTransparenciaStateChanged

    private void BotonAlisarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BotonAlisarStateChanged
        if(this.getSelectedLienzo() != null)    this.getSelectedLienzo().setAlisado(this.BotonAlisar.isSelected());
    }//GEN-LAST:event_BotonAlisarStateChanged

    private void NuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoActionPerformed
        MenuNuevoActionPerformed(evt);
    }//GEN-LAST:event_NuevoActionPerformed

    private void AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirActionPerformed
        MenuAbrirActionPerformed(evt);
    }//GEN-LAST:event_AbrirActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        MenuGuardarActionPerformed(evt);
    }//GEN-LAST:event_GuardarActionPerformed

    private void VolcadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VolcadoActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            vi.getLienzo2D().volcarFigura();
        }
    }//GEN-LAST:event_VolcadoActionPerformed

    private void MenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().setImg(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_MenuAbrirActionPerformed

    private void RescaleOpMENUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RescaleOpMENUActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(img, img);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_RescaleOpMENUActionPerformed

    private void ConvolveOpMENUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvolveOpMENUActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    float filtro[] = {0.1f, 0.1f, 0.1f, 0.1f, 0.2f, 0.1f,0.1f, 0.1f, 0.1f};
                    Kernel k = new Kernel(3, 3, filtro);
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(img, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ConvolveOpMENUActionPerformed

    private void BrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BrilloFocusGained
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo2D().getImg().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImg().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImg().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_BrilloFocusGained

    private void BrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_BrilloFocusLost
        imgFuente = null;
    }//GEN-LAST:event_BrilloFocusLost

    private void BrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_BrilloStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    // Obtener el valor del deslizador de brillo
                    float brilloValue = this.Brillo.getValue();

                    RescaleOp rop = new RescaleOp(1.0F, brilloValue, null);
                    rop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_BrilloStateChanged

    private void ContrasteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ContrasteFocusGained
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo2D().getImg().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImg().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImg().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_ContrasteFocusGained

    private void ContrasteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ContrasteFocusLost
        imgFuente = null;
    }//GEN-LAST:event_ContrasteFocusLost

    private void ContrasteStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ContrasteStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    // Obtener el valor del deslizador de brillo
                    float contrasteValue = this.Contraste.getValue() / 20.0F;

                    RescaleOp rop = new RescaleOp(contrasteValue, 0.0F, null);
                    rop.filter(imgFuente, img);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ContrasteStateChanged

    private void MascaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MascaraActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
            BufferedImage image = vi.getLienzo2D().getImg();
            Kernel k = getKernel(this.Mascara.getSelectedIndex());
            if(image != null && k != null){
                try{
                    ConvolveOp cop = new ConvolveOp(k);
                    BufferedImage imgdest = cop.filter(image, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_MascaraActionPerformed

    private void CometaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CometaFocusGained
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo2D().getImg().getColorModel();
            WritableRaster raster = vi.getLienzo2D().getImg().copyData(null);
            boolean alfaPre = vi.getLienzo2D().getImg().isAlphaPremultiplied();
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_CometaFocusGained

    private void CometaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CometaFocusLost
        imgFuente = null;
    }//GEN-LAST:event_CometaFocusLost

    private void CometaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CometaStateChanged
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            BufferedImage image = vi.getLienzo2D().getImg();
            if (image != null) {
                try {
                    // Obtener el valor del deslizador de tamaño de máscara
                    int mascaraSize = this.Cometa.getValue();

                    // Crear la máscara del filtro de emborronamiento "cometa"
                    float[] kernel = createCometBlurKernel(mascaraSize);
                    Kernel k = new Kernel(kernel.length, 1, kernel);

                    // Aplicar el filtro de convolución a la imagen
                    ConvolveOp cop = new ConvolveOp(k, java.awt.image.ConvolveOp.EDGE_NO_OP, null);
                    cop.filter(imgFuente, image);
                    vi.getLienzo2D().repaint();

                    // Mostrar en consola el valor de la máscara aplicada
                    System.out.println("Tamaño de la máscara para emborronamiento cometa: " + mascaraSize);
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_CometaStateChanged

    private void AffineTransformOpMENUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AffineTransformOpMENUActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    AffineTransform at = AffineTransform.getScaleInstance(1.5,1.5);
                    AffineTransformOp atop = new AffineTransformOp(at,null);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
         }
    }//GEN-LAST:event_AffineTransformOpMENUActionPerformed

    private void LookupOpMENUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LookupOpMENUActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    byte funcionT[] = new byte[256];
                    for (int x=0; x<256; x++)
                     funcionT[x] = (byte)(255-x); // Negativo
                    ByteLookupTable tabla = new ByteLookupTable(0, funcionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
         }
    }//GEN-LAST:event_LookupOpMENUActionPerformed

    private void ContrasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContrasteButtonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
             BufferedImage img = vi.getLienzo2D().getImg();
            try{
                int type = LookupTableProducer.TYPE_SFUNCION;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter( img , img); // Imagen origen y destino iguales
                vi. getLienzo2D().repaint();
            } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
            }
         }
    }//GEN-LAST:event_ContrasteButtonActionPerformed

    private void OscurecerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OscurecerButtonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
             BufferedImage img = vi.getLienzo2D().getImg();
            try{
                int type = LookupTableProducer.TYPE_POWER;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter( img , img); // Imagen origen y destino iguales
                vi. getLienzo2D().repaint();
            } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
            }
         }
    }//GEN-LAST:event_OscurecerButtonActionPerformed

    private void IluminarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IluminarButtonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
             BufferedImage img = vi.getLienzo2D().getImg();
            try{
                int type = LookupTableProducer.TYPE_LOGARITHM;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter( img , img); // Imagen origen y destino iguales
                vi. getLienzo2D().repaint();
            } catch(IllegalArgumentException e){
            System.err.println(e.getLocalizedMessage());
            }
         }
    }//GEN-LAST:event_IluminarButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        LookupOpMENUActionPerformed(evt);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void Rotar180ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Rotar180ButtonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    double r = Math.toRadians(180);
                    Point p = new Point(img.getWidth()/2, img.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
         }
    }//GEN-LAST:event_Rotar180ButtonActionPerformed

    private void rotateSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotateSliderFocusGained
        VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
        if(vi!=null){
            this.imgFuente = vi.getLienzo2D().getImg();
        }
    }//GEN-LAST:event_rotateSliderFocusGained

    private void rotateSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotateSliderFocusLost
        imgFuente = null;
        this.rotateSlider.setValue(0);
    }//GEN-LAST:event_rotateSliderFocusLost

    private void rotateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotateSliderStateChanged
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
            if(imgFuente!=null){
                try{
                    double r = Math.toRadians(rotateSlider.getValue());
                    Point p = new Point(imgFuente.getWidth()/2, imgFuente.getHeight()/2);
                    AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgFuente, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
         }
    }//GEN-LAST:event_rotateSliderStateChanged

    private void MasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MasButtonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    double scaleFactor = 1.25;
                    AffineTransform at = AffineTransform.getScaleInstance(scaleFactor, scaleFactor);
                    
                    AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
         }
    }//GEN-LAST:event_MasButtonActionPerformed

    private void menosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menosButtonActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    double scaleFactor = 0.75;
                    AffineTransform at = AffineTransform.getScaleInstance(scaleFactor, scaleFactor);
                    
                    AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(img, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
         }        
    }//GEN-LAST:event_menosButtonActionPerformed

    private void reto1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reto1ActionPerformed
        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
         if (vi != null) {
            BufferedImage img = vi.getLienzo2D().getImg();
            if(img!=null){
                try{
                    byte[] functionT = new byte[256];
                    int controlPoint = 128; 

                    for (int x = 0; x < 256; x++) {
                      if (x < controlPoint) {
                        functionT[x] = (byte) (x * controlPoint / 128); // Linear for x < 128
                      } else if (x == controlPoint) {
                        functionT[x] = (byte) controlPoint; 
                      } else {
                        int newX = (255 - controlPoint) * (x - controlPoint) / 127 + controlPoint;
                        functionT[x] = (byte) Math.min(newX, 255); 
                      }
                    }
                    ByteLookupTable tabla = new ByteLookupTable(0, functionT);
                    LookupOp lop = new LookupOp(tabla, null);
                    BufferedImage imgdest = lop.filter(img, null);
                    vi.getLienzo2D().setImg(imgdest);
                    vi.getLienzo2D().repaint();
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
         }
    }//GEN-LAST:event_reto1ActionPerformed

    private void reto2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reto2ActionPerformed

        VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());
        if (vi != null) {
           BufferedImage img = vi.getLienzo2D().getImg();
           if(img!=null){
               try{
                    double m = 128; //para el brillo
                    double e = 2.0;  //tamaño                   
                    
                   ByteLookupTable tabla = (ByteLookupTable) inverseSFunction(m, e);
                   LookupOp lop = new LookupOp(tabla, null);
                   BufferedImage imgdest = lop.filter(img, null);
                   vi.getLienzo2D().setImg(imgdest);
                   vi.getLienzo2D().repaint();
               } catch(IllegalArgumentException e){
               System.err.println(e.getLocalizedMessage());
               }
           }
        }
    }//GEN-LAST:event_reto2ActionPerformed

    public static LookupTable inverseSFunction(double m, double e) {
      // Validate input parameters (m and e)
      if (m < 0 || m > 255 || e <= 0) {
        throw new IllegalArgumentException("Invalid parameters: m must be between 0 and 255, and e must be greater than 0.");
      }

      // Calculate constants based on the inverted formula
      double invMin = 1.0 / (1.0 + Math.pow(m / 255.0, e)); // Inverted power term for brightening
      double K = 255.0 * invMin; // Adjusted K for efficient calculation

      // Create lookup table
      byte[] lt = new byte[256];
      for (int l = 0; l < 256; l++) {
        lt[l] = (byte) (K * Math.pow(m / (float) (l + 1), e)); // +1 to avoid division by zero
      }

      // Create and return lookup table
      ByteLookupTable slt = new ByteLookupTable(0, lt);
      return slt;
    }
    
    private float[] createCometBlurKernel(int size) {

        float kernelLength = size /10; // Odd size for centered blur
        float[] kernel = new float[(int)kernelLength];
        float centerIndex = kernelLength / 2;

        // Fill kernel with decreasing weights towards the sides
        for (int i = 0; i < (int)kernelLength; i++) {
          float distance = Math.abs(i - centerIndex);
          float weight = Math.max(0, kernelLength - distance);
          kernel[i] = weight;
        }

        return kernel;
    }
    
    private Kernel getKernel(int seleccion){
        Kernel k = null;
        
       
        switch (seleccion) {
            case 0:
                k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
            case 1:
                k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;
            case 2:
                k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
            case 3:
                k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
            case 4:
                k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            case 5:
                float[] filtroIluminado = {
                    2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f, 2.0f / 9.0f,
                };
                k = new Kernel(3,3,filtroIluminado);
                break;
            default:
                throw new AssertionError();
        }

        return k;
    }
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Abrir;
    private javax.swing.JMenuItem AffineTransformOpMENU;
    private javax.swing.JToggleButton BotonAlisar;
    private javax.swing.JButton BotonColor;
    private javax.swing.JToggleButton BotonElipse;
    private javax.swing.JToggleButton BotonFantasma;
    private javax.swing.JToggleButton BotonLinea;
    private javax.swing.JToggleButton BotonMover;
    private javax.swing.JToggleButton BotonRectangulo;
    private javax.swing.JToggleButton BotonRelleno;
    private javax.swing.JToggleButton BotonTransparencia;
    private javax.swing.JSlider Brillo;
    private javax.swing.JSlider Cometa;
    private javax.swing.JSlider Contraste;
    private javax.swing.JButton ContrasteButton;
    private javax.swing.JMenuItem ConvolveOpMENU;
    private javax.swing.JSlider Grosor;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton IluminarButton;
    private javax.swing.JLabel LabelEstado;
    private javax.swing.JMenuItem LookupOpMENU;
    private javax.swing.JButton MasButton;
    private javax.swing.JComboBox<String> Mascara;
    private javax.swing.JMenuItem MenuAbrir;
    private javax.swing.JMenuItem MenuGuardar;
    private javax.swing.JMenuItem MenuNuevo;
    private javax.swing.JButton Nuevo;
    private javax.swing.JButton OscurecerButton;
    private javax.swing.JPanel PanelAbajo;
    private javax.swing.JPanel PanelEstado;
    private javax.swing.JPanel PanelToolBar;
    private javax.swing.JMenuItem RescaleOpMENU;
    private javax.swing.JButton Rotar180Button;
    private javax.swing.JButton Volcado;
    private javax.swing.ButtonGroup colo;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton jButton4;
    private javax.swing.JColorChooser jColorChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton menosButton;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuImagen;
    private javax.swing.ButtonGroup paint;
    private javax.swing.JMenuItem reto1;
    private javax.swing.JMenuItem reto2;
    private javax.swing.JSlider rotateSlider;
    // End of variables declaration//GEN-END:variables
}
