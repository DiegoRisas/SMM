/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package p4;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.ArrayList;


/**
 *
 * @author Diego
 */
public class PanelLienzo extends javax.swing.JPanel {

    enum Herramienta{
        Linea, Rectangulo, Elipse, Arrastrar, Fantasma
    }
    
    private Shape forma = new Line2D.Float();
    private Color color = Color.black;
    private Herramienta herramienta;
    private Point punto;
    private Stroke trazo = new BasicStroke();
    private Boolean relleno = false;
    private Boolean mover = false;
    private Boolean alisado = false;
    private Boolean transparencia = false;
    private ArrayList<Shape> vShape = new ArrayList();


    public Shape getForma() {
        return forma;
    }

    public void setForma(Shape forma) {
        this.forma = forma;
    }

    public Color getColor() {
        return color;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public Boolean getRelleno() {
        return relleno;
    }

    public void setRelleno(Boolean relleno) {
        this.relleno = relleno;
    }

    public Herramienta getHerramienta() {
        return herramienta;
    }

    public void setHerramienta(Herramienta herramienta) {
        this.herramienta = herramienta;
    }

    public Stroke getTrazo() {
        return trazo;
    }

    public void setTrazo(Stroke trazo) {
        this.trazo = trazo;
    }

    public Boolean getAlisado() {
        return alisado;
    }

    public void setAlisado(Boolean alisado) {
        this.alisado = alisado;
    }

    public Boolean getTransparencia() {
        return transparencia;
    }

    public void setTransparencia(Boolean transparencia) {
        this.transparencia = transparencia;
    }

    public Boolean getMover() {
        return mover;
    }

    public void setMover(Boolean mover) {
        this.mover = mover;
    }
    
    
        
    
    /**
     * Creates new form PanelLienzo
     */
    public PanelLienzo() {
        initComponents();
    }

    @Override
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2d = (Graphics2D)g;
        
        g2d.setStroke(trazo);
        
        g2d.setPaint(color);
        
        for(Shape s:vShape){
            if(relleno){
                g2d.fill(s);
            }
            g2d.draw(s);
        }
    }
    
    /*
    private Shape figuraSeleccionada(Point2D p){
        for(Shape s:vShape)
            if(s.contains(p)) return s;
        return null;
    }
    */
    private Shape figuraSeleccionada(Point2D p){
        Shape aux = null;
        for(Shape s:vShape){
            if(s instanceof Line2D) aux = isNear(p);
            if(s.contains(p)) aux = s;
        }
        return aux;
    }
    
    public Shape isNear(Point2D p){
        double threshold = 2.0; // Umbral de distancia para considerar que el punto está cerca de una línea

        for (Shape s : vShape) {
            if (s instanceof Line2D) {
                Line2D linea = (Line2D) s;
                // Calcula la distancia entre el punto y la línea
                double distancia = linea.ptSegDist(p);
                // Si la distancia es menor o igual al umbral, el punto está cerca de la línea
                if (distancia <= threshold) {
                    return s;
                }
            }
        }
        return null; // Si el punto no está cerca de ninguna línea, devuelve false
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if(mover){

                forma = figuraSeleccionada(evt.getPoint());
            
        }else{
            switch (herramienta) {
                case Linea: 
                    forma = new Line2D.Float(evt.getPoint(),evt.getPoint());
                    break;
                case Rectangulo:
                    forma = new Rectangle(evt.getPoint());
                    break;

                case Elipse:
                    forma = new Ellipse2D.Float(evt.getPoint().x,evt.getPoint().y,evt.getPoint().x,evt.getPoint().y);
                    break;
                default:
                    throw new AssertionError();
            }
            vShape.add(forma); 
        }

        punto = evt.getPoint();
    }//GEN-LAST:event_formMousePressed

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        if (mover) {
           if (forma != null) {
                 // Calcula el desplazamiento del ratón
                double deltaX = evt.getPoint().getX() - punto.getX();
                double deltaY = evt.getPoint().getY() - punto.getY();
                
               if (forma instanceof Line2D) {
                    ((Line2D) forma).setLine(((Line2D) forma).getX1() + deltaX, ((Line2D) forma).getY1() + deltaY,
                                      ((Line2D) forma).getX2() + deltaX, ((Line2D) forma).getY2() + deltaY);
               } else if (forma instanceof Rectangle) {
                   ((Rectangle) forma).setLocation(evt.getPoint());
               } else if (forma instanceof Ellipse2D) {
                    // Obtiene la elipse seleccionada
                    Ellipse2D elipse = (Ellipse2D) forma;

                    // Mueve la elipse sumando el desplazamiento a su posición actual
                    elipse.setFrame(elipse.getX() + deltaX, elipse.getY() + deltaY, elipse.getWidth(), elipse.getHeight());
               }
                // Actualiza el punto de inicio para el próximo movimiento
                punto = evt.getPoint();
           }
        }else{
            if(herramienta == Herramienta.Linea)((Line2D)forma).setLine(((Line2D)forma).getP1(), evt.getPoint());
            if(herramienta == Herramienta.Rectangulo)((Rectangle)forma).setFrameFromDiagonal(punto,evt.getPoint());
            if(herramienta == Herramienta.Elipse)((Ellipse2D)forma).setFrameFromDiagonal(punto, evt.getPoint());
        }

        this.repaint();
    }//GEN-LAST:event_formMouseDragged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
